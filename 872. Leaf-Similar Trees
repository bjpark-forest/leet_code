# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def leafSimilar(self, root1, root2) -> bool:
        def dfs(node, leaf):
            if node:
                if not node.left and not node.right:
                    leaf.append(node.val)
                dfs(node.left, leaf)
                dfs(node.right, leaf)
        r1 = []
        dfs(root1,r1)
        r2 = []
        dfs(root2, r2)
        if r1 == r2:
            return True
        else :
            return False
root1 = TreeNode(3,TreeNode(5,TreeNode(6),TreeNode(2,TreeNode(7),TreeNode(4))),TreeNode(1,TreeNode(9),TreeNode(8)))
root2 = TreeNode(3, TreeNode(5, TreeNode(6), TreeNode(7)), TreeNode(1, TreeNode(4), TreeNode(2, TreeNode(9), TreeNode(8))))

root1 = TreeNode(1,TreeNode(2),TreeNode(3))
root2 = TreeNode(1, TreeNode(3), TreeNode(2))
Solution().leafSimilar(root1, root2)       
